#!/bin/bash

#set -x

# This instance-specific script is supposed to be sourced from the Qserv
# management scripts in order to set up proper values of the corresponding
# parameters.


# ---------------------------------------------------------------------
# 2023-11-06: changes to the configuration of all 15 nodes of the Qserv
#             cluster.
#
# The default location of the core dumps on the RHEL8 filesystem is at
#
#  CORE_DUMPS=/var/lib/systemd/coredump
#
# The files are stored here in the lz4 compressed format by the system
# as configured by
#
# % cat /proc/sys/kernel/core_pattern
#   |/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e
#
# This service has the following configuration
#
# % cat /etc/systemd/coredump.conf
# [Coredump]
# #Storage=external
# #Compress=yes
# #ProcessSizeMax=2G
# #ExternalSizeMax=2G
# #JournalSizeMax=767M
# #MaxUse=
# #KeepFree=
#
# There are a few problems with this configuration:
#   - limited capacity (a few GB of the destinaton folder which is mounted
#     to the root filesystem of a host)
#   - the files are owned by user 'root'
#   - the files are truncated at 2GB (which is way to low for Qserv processes)
#
# The following solution was applied at each node o fthe cluster:
# 
# mkdir -p /zfspool/core-files
# chmod a+rwx /zfspool/core-files
# echo '/zfspool/core-files/core.%e.%p.%h.%t' > /proc/sys/kernel/core_pattern
#
# And the new location of the files is specified below:

CORE_DUMPS=/zfspool/core-files

# -----------------
# ----- Qserv -----
# -----------------

# 10.6.8 + updated SciSQL
QSERV_DB_IMAGE_TAG="qserv/lite-mariadb:2022.7.1-rc1-21-g292b0f1ea"

# 2023-04-12: The latest production version installed to test "zombi"
#             worker queries.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1"

# 2023-05-01: Based on DM-38069 that was rebased against DM-38909 (an attempt
#             to fix the query cancellaton problem that exists in "main").
#             Note that DM-38909 is based on "main".
#
# 2023-05-01: Also instrumented mysql::MySQLConnection::cancel() to report
#             progress of the operation to ensure the method get's called
#             and it actually does someting.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-36-g6a566e32c-dirty"

# 2023-05-18: The latest production version that comes with the following
#             changes on top of the previous release:
#
# - Use templatized queries at workers to reduce memory allocation
# - Fixes for extreme slowdowns when cancelling broad subchunk queries
# - Eliminated false-positive error messages for missing optional ingest config parameters
# - Fixed some issues with transaction state counters and colors on web dashboard
# - Upgrades of package dependencies (XRootD, lsst/log, and lsst/sphgeom)
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.5.1-rc1"

# 2023-05-22: Based on DM-39080 which fixes the memory grows in the R-I
#             system's Controller and comes with optimized worker
#             monitoring protocol.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.5.1-rc1-7-g96c46879d"
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.5.1-rc1-8-gdad558377"
#
#             Is rebased against DM-39425 which has a fix to a bug fix
#             in wpublish:QueriesAndChunks which was only reporting
#             the N-N queries of suibChunkId=0. Now it reports
#             all subchunks.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.5.1-rc1-23-g23fa3b341"

# 2023-06-15: Based on DM-39464 which comes with the query completion/cancellation
#             broadcasts.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.5.1-rc1-30-g2ce4cf109"

# 2023-06-20: Based on DM-38069 (file-based result delivery) which was
#             rebased against the latest state of the main branch,
#             including DM-39464 (query completion/cancellation broadcasts).
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.6.1-rc1-10-g430ffc0f4"

# 2023-07-18: Based on DM-39819 (worker-side termination of the large result
#             queries), which also includes DM-38069 and the latest "main".
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-16-gd49caf432"

# 2023-07-20: Based on DM-39819 (worker-side termination of the large result
#             queries), which is based on the latest "main" (including DM-38069
#             merged into it), plus a possible bug in the MySQL query cancellation
#             at workers.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-17-gac92a0610"

# 2023-08-08: Based on DM-39516 (monitoring Czar and worker database activities
#             using 'SHOW FULL PROCESSLIST'). The branch is based on the latest
#             'main'.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-35-g2a9d617d6"

# 2023-08-15: Based on DM-37973 (monitoring Czar) which also includes the above-mentioned
#             DM-39516.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-44-g4cc850c42"

# 2023-08-24: Based on DM-37973 (monitoring Czar) which also includes the above-mentioned
#             DM-39516 and DM-40506 (Synchronization bug in the QMeta query runner class
#             of Qserv).
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-53-ga577941fc"

# 2023-09-11: Based on DM-37973 (monitoring Czar) which also includes the most
#             recent release 2023.9.1-rc1.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.9.1-rc1-21-gc6e71652e"

# 2023-09-13: Based on DM-37973 (monitoring Czar) which also includes DM-40787
#             (Short DNS names of the worker hosts do not work in the Kubernetes
#             environment) merged into the main branch.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.9.1-rc1-25-gdc3b3b3ad"

# 2023-10-12: The latest production version that includes DM-37973 (monitoring Czar)
#             and DM-40787 (Short DNS names of the worker hosts do not work in
#             the Kubernetes environment)
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1"

# 2023-10-12: Based on DM-40891 (Alma 9) rebased against the latest production
#             release 2023.10.1-rc1.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-6-ge78da86d0"
#
#             (Temporarily) disabled socket reuse because the previous tag
#             is failing fo rthe HTTP protocol.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-7-g6e7951c30"
#
#             The final version
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-6-g1344a1021"

# 2023-10-20: Based on DM-29447 (disable BLOB/TEXT types in "director" table
#             schema) and the previous tags at the base.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-14-g45834667d"

# 2023-10-26: Based on DM-41358 (fixed a bug in the workr task monitoring)
#             The branch is based on teh latest "main" including all
#             above-mentioned branches.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-19-gb341a2890"
#
#             Modified version of the task finalization. Now it's done
#             by wdb::QueryRunner after the query processing actually
#             gets finished instead of by wsched::BlendScheduler after
#             the query gets booted off its scheduler.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-19-gbb5a50524-dirty"
#
#             Same as before, plus modified version of the task start sequence.
#             Now it's done by wdb::QueryRunner when the actual processing is
#             about to begin.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-18-gc436210a6"

# 2023-10-31: Based on DM-41477 including DM-41358 merged into the main branch
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-21-g25fa2898c"

# 2023-11-06: Based on DM-41625 (refactored MySQL connector of Qserv and fixed
#             the query cancellation bug).
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-23-g1d9be073f"
#
#             Improved implementation of the connector.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-23-g1d9be073f-dirty"

# 2023-11-08: Based on DM-41657 (re-enable conditional booting into Snail)
#             as well as all above-mentioned tags
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-28-g47e2b2aaa"

# 2023-11-29: Based on DM-41291 (does NOT include DM-41657) that implements
#             the HTTP-based Qserv worker management protocol replacing
#             an older one based on XROOTD/SSI.
#
#             NOTE: This requires changes (extension) to be made to the Qserv worker
#                   configuration files to allow workers log into the Registry.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-15-g0230c64f5"

# 2023-12-01: Based on DM-41535 (that's based on DM-41291) that adds
#             the Qserv worker-side REST service for pulling info on
#             files.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-20-gd18f4aafe"

# 2023-12-16: Based on DM-40003 that eliminates the SSI streaming
#             from a list of available result delivery options.
#             Includes the main branch that has DM-41535.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-25-gf8f193b6e"
#
#             Same as before, plus relaxed memory manager that won't
#             attempt to lock table sin memory or cound any memory
#             used by the tables.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-26-g13bc27135"
#
#             Same as before, plus rebased on the latest state of the main
#             branch and wbase::ChannelShared merged into wbase::FileChannelShared.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-42-g9baa513d4"
#
#             Refactored and streamlined implementation of FileChannelShared
#             The new implementation no longer depends on a separate data processing
#             class TransmitData for extracting rows from the result sets and
#             generating the Protobuf-serialized output stream of data or sending
#             responses to Czar.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-45-ga67a5d013"
#
#             Significant changes in the Qserv protocol. Refactored and streamlined
#             result processing at Czar. Eliminated any code related to the SSI-based
#             result streaming at Czar.
#
QSERV_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-45-gb1ad8be48-dirty"

QSERV_BASE_DIR="/zfspool/qserv-test"
QSERV_CZAR_DB_PORT=3308
QSERV_CZAR_PROXY_PORT=4048
QSERV_WORKER_DB_PORT=3368
QSERV_XROOTD_PORT=1894

# -------------------------------------
# ----- Replication/Ingest system -----
# -------------------------------------

# 10.6.5
REPL_DB_IMAGE_TAG="qserv/lite-mariadb:2022.1.1-rc1"

# 2023-04-20: The latest production version
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1"

# 2023-05-16: Based on DM-39200 which fixes incorrect counters
#             displayed on the Web Dashboard. Note that this
#             branch doesn't include a fix of the branch DM-39080
#             that is mentioned above.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-43-g7bd3cbc78"

# 2023-05-22: Based on DM-39080 which fixes the memory grows in the R-I
#             system's Controller and comes with optimized worker
#             monitoring protocol.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.5.1-rc1-7-g96c46879d"
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.5.1-rc1-8-gdad558377"
#
#             Is rebased against DM-39425 which has a fix to a bug fix
#             in wpublish:QueriesAndChunks which was only reporting
#             the N-N queries of suibChunkId=0. Now it reports
#             all subchunks.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.5.1-rc1-23-g23fa3b341"

# 2023-06-19: Based on DM-39704 which eliminates the option "local=0"
#             when constructing the "director" indexes.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.5.1-rc1-25-gfbe0972ad"

# 2023-06-20: Based on DM-38069 (file-based result delivery) which was
#             rebased against the latest state of the main branch,
#             including DM-39464 (query completion/cancellation broadcasts)
#             and DM-39704 (eliminating "local=0" option in the director
#             index construction).
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.6.1-rc1-10-g430ffc0f4"

# 2023-07-18: Based on DM-39819 (worker-side termination of the large result
#             queries), which also includes DM-38069 and the latest "main".
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-16-gd49caf432"

# 2023-07-20: Based on DM-39819 (worker-side termination of the large result
#             queries), which is based on the latest "main" (including DM-38069
#             merged into it), plus a possible bug in the MySQL query cancellation
#             at workers.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-17-gac92a0610"

# 2023-08-08: Based on DM-39516 (monitoring Czar and worker database activities
#             using 'SHOW FULL PROCESSLIST'). The branch is based on the latest
#             'main'.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-35-g2a9d617d6"

# 2023-08-15: Based on DM-37973 (monitoring Czar) which also includes the above-mentioned
#             DM-39516.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-44-g4cc850c42"

# 2023-08-24: Based on DM-37973 (monitoring Czar) which also includes the above-mentioned
#             DM-39516 and DM-40506 (Synchronization bug in the QMeta query runner class
#             of Qserv).
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.7.1-rc3-53-ga577941fc"

# 2023-09-11: Based on DM-37973 (monitoring Czar) which also includes the most
#             recent release 2023.9.1-rc1.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.9.1-rc1-21-gc6e71652e"

# 2023-09-13: Based on DM-37973 (monitoring Czar) which also includes DM-40787
#             (Short DNS names of the worker hosts do not work in the Kubernetes
#             environment) merged into the main branch.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.9.1-rc1-25-gdc3b3b3ad"

# 2023-10-12: The latest production version that includes DM-37973 (monitoring Czar)
#             and DM-40787 (Short DNS names of the worker hosts do not work in
#             the Kubernetes environment)
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1"

# 2023-10-12: Based on DM-40891 (Alma 9) rebased against the latest production
#             release 2023.10.1-rc1.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-6-ge78da86d0"
#
#             (Temporarily) disabled socket reuse because the previous tag
#             is failing fo rthe HTTP protocol.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-7-g6e7951c30"
#
#             The final version
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-6-g1344a1021"

# 2023-10-20: Based on DM-29447 (disable BLOB/TEXT types in "director" table
#             schema) and the previous tags at the base.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-14-g45834667d"

# 2023-10-26: Based on DM-41358 (fixed a bug in the workr task monitoring)
#             The branch is based on the latest "main" including all
#             above-mentioned branches.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-19-gb341a2890"
#
#             Modified version of the task finalization. Now it's done
#             by wdb::QueryRunner after the query processing actually
#             gets finished instead of by wsched::BlendScheduler after
#             the query gets booted off its scheduler.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-19-gbb5a50524-dirty"
#
#             Same as before, plus modified version of the task start sequence.
#             Now it's done by wdb::QueryRunner when the actual processing is
#             about to begin.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-18-gc436210a6"

# 2023-10-31: Based on DM-41477 including DM-41358 merged into the main branch
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-21-g25fa2898c"

# 2023-11-06: Based on DM-41625 (refactored MySQL connector of Qserv and fixed
#             the query cancellation bug).
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-23-g1d9be073f"
#
#             Improved implementation of the connector.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-23-g1d9be073f-dirty"

# 2023-11-08: Based on DM-41657 (re-enable conditional booting into Snail)
#             as well as all above-mentioned tags
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.10.1-rc1-28-g47e2b2aaa"

# 2023-11-29: Based on DM-41291 (does NOT include DM-41657) that implements
#             the HTTP-based Qserv worker management protocol replacing
#             an older one based on XROOTD/SSI.
#
#             NOTE: This requires changes (extension) to be made to the Qserv worker
#                   configuration files to allow workers log into the Registry.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-15-g0230c64f5"

# 2023-12-01: Based on DM-41535 (that's based on DM-41291) that adds
#             the Qserv worker-side REST service for pulling info on
#             files.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-20-gd18f4aafe"

# 2023-12-16: Based on DM-40003 that eliminates the SSI streaming
#             from a list of available result delivery options.
#             Includes the main branch that has DM-41535.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-25-gf8f193b6e"
#
#             Same as before, plus relaxed memory manager that won't
#             attempt to lock table sin memory or cound any memory
#             used by the tables.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-26-g13bc27135"
#
#             Same as before, plus rebased on the latest state of the main
#             branch and wbase::ChannelShared merged into wbase::FileChannelShared.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-42-g9baa513d4"
#
#             Refactored and streamlined implementation of FileChannelShared
#             The new implementation no longer depends on a separate data processing
#             class TransmitData for extracting rows from the result sets and
#             generating the Protobuf-serialized output stream of data or sending
#             responses to Czar.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-45-ga67a5d013"
#
#             Significant changes in the Qserv protocol. Refactored and streamlined
#             result processing at Czar. Eliminated any code related to the SSI-based
#             result streaming at Czar.
#
REPL_IMAGE_TAG="qserv/lite-qserv:2023.11.1-rc3-45-gb1ad8be48-dirty"


REPL_INSTANCE_ID="slac6test"
REPL_DB_PORT=23308
REPL_CONTR_HTTP_PORT=25881
REPL_REG_PORT=25882

REPL_REG_PARAMETERS="--registry-port=${REPL_REG_PORT} --debug"

# Extended Controller timeouts to allow long operation when ingesting
# large catalogs:
#   request timeout: 8 hours
#   job timeout: 24 hours
# --controller-num-director-index-connections=4
REPL_CONTR_PARAMETERS="--registry-port=${REPL_REG_PORT} --xrootd-port=${QSERV_XROOTD_PORT} --controller-http-server-port=${REPL_CONTR_HTTP_PORT} --http-root=/usr/local/qserv/www/ --worker-evict-timeout=3600 --health-probe-interval=120 --replication-interval=600 --qserv-sync-timeout=600 --do-not-create-folders --controller-ingest-job-monitor-ival-sec=1 --controller-request-timeout-sec=28800 --controller-job-timeout-sec=86400 --debug"

REPL_WORKER_SVC_PORT=25800
REPL_WORKER_FS_PORT=25801
REPL_WORKER_LOADER_PORT=25802
REPL_WORKER_EXPORTER_PORT=25803
REPL_WORKER_HTTP_LOADER_PORT=25804

REPL_WORKER_PARAMETERS="--registry-port=${REPL_REG_PORT} --worker-svc-port=${REPL_WORKER_SVC_PORT} --worker-fs-port=${REPL_WORKER_FS_PORT} --worker-loader-port=${REPL_WORKER_LOADER_PORT} --worker-exporter-port=${REPL_WORKER_EXPORTER_PORT} --worker-http-loader-port=${REPL_WORKER_HTTP_LOADER_PORT} --worker-ingest-num-retries=4 --schema-upgrade-wait=1 --schema-upgrade-wait-timeout=600 --do-not-create-folders --debug"

# Uncomment if needed to mount the local (ouside the container) version of
# the Web dashboard and other Web apps served by the HTTP server of
# the Master Controller 
#
# REPL_HTTP_ROOT="/zfspool/management/qserv/src/www"

# Limit size of the replication containers by 100 GB
# This is needed for ingesting (very) large numbers of contributions.
REPL_MEMORY_LIMIT=107374182400

# ----- Common parameters

# User account under which the containers will be run.
#
# % id rubinqsv
#   uid=45386(rubinqsv) gid=1126(gu) groups=1126(gu)
#
CONTAINER_UID=45386
CONTAINER_GID=1126

CONTAINER_NAME_PREFIX="qserv-test-"
#CONTAINER_RESTART_POLICY="unless-stopped"
CONTAINER_RESTART_POLICY=""

# 10 GB
ULIMIT_MEMLOCK=1099511627776

# Unlimited core file size
ULIMIT_CORE="-1:-1"

# Other parameters are set by the following script based on the above defined
# one, or be loaded from predefined locations.
. $(dirname "$0")/common

