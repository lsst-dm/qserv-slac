#!/bin/bash

#set -x

# This instance-specific script is supposed to be sourced from the Qserv
# management scripts in order to set up proper values of the corresponding
# parameters.

# ---------------------------------------------------------------------
# 2023-11-06: changes to the configuration of all 15 nodes of the Qserv
#             cluster.
#
# The default location of the core dumps on the RHEL8 filesystem is at
#
#  CORE_DUMPS=/var/lib/systemd/coredump
#
# The files are stored here in the lz4 compressed format by the system
# as configured by
#
# % cat /proc/sys/kernel/core_pattern
#   |/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e
#
# This service has the following configuration
#
# % cat /etc/systemd/coredump.conf
# [Coredump]
# #Storage=external
# #Compress=yes
# #ProcessSizeMax=2G
# #ExternalSizeMax=2G
# #JournalSizeMax=767M
# #MaxUse=
# #KeepFree=
#
# There are a few problems with this configuration:
#   - limited capacity (a few GB of the destinaton folder which is mounted
#     to the root filesystem of a host)
#   - the files are owned by user 'root'
#   - the files are truncated at 2GB (which is way to low for Qserv processes)
#
# The following solution was applied at each node o fthe cluster:
# 
# mkdir -p /zfspool/core-files
# chmod a+rwx /zfspool/core-files
# echo '/zfspool/core-files/core.%e.%p.%h.%t' > /proc/sys/kernel/core_pattern
#
# And the new location of the files is specified below:

CORE_DUMPS=/zfspool/core-files

# -----------------
# ----- Qserv -----
# -----------------

# 10.6.5
# QSERV_DB_IMAGE_TAG="qserv/lite-mariadb:2022.1.1-rc1"

# 10.6.8 + updated SciSQL
# ATTENTION: need to run mysql_upgrade on each server
# QSERV_DB_IMAGE_TAG="qserv/lite-mariadb:2022.7.1-rc1-21-g292b0f1ea"
# 2024-11-19: Upgraded to MariaDB 11.4.4 (Ubuntu 20.04)
#
# QSERV_DB_IMAGE_TAG="qserv/lite-mariadb:2024.11.1-rc1-1-g36b8ad4a4"
#
# 2025-08-11: MariaDB 11.4.4 built on top of Ubuntu 22.04.
#             The change was needed because 20.04 expired.
#
QSERV_DB_IMAGE_TAG="qserv/lite-mariadb:2025.8.1-rc1-17-gdc930850d"

# Using custom versions built for Qserv
#
CZAR_SSL_PROXY_IMAGE_TAG="qserv/mysql-proxy-ssl:latest"

# The latest stable release.
# QSERV_IMAGE_TAG="qserv/lite-qserv:2022.5.2-rc1"

# 2022-09-09: Built of the main branch
#             NOTE: updated QMeta schema version to 6 to support
#                   full text search on the queries.
# QSERV_IMAGE_TAG="qserv/lite-qserv:2022.7.1-rc1-32-gcbe5a5e48"

# 2022-09-13: Based on the bug fix branch DM-36223.
#             NOTE: updated QMeta schema version to 8 for extended
#                   bytes/rowsd counters and a bug fix in the table
#                   schema of QInfo.
# QSERV_IMAGE_TAG="qserv/lite-qserv:2022.7.1-rc1-39-g572903551"

# 2022-11-09: Based on the bug fix branch DM-36935 that is meant
#             to address an issue with the memory utilization of
#             the worker database servers while processing queries
#             that require materialized sub-chunks. The related problem
#             that _may_ be studied here as well would be a bug in the query
#             cancellation algorithm at workers.
#             
# QSERV_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-62-gba7875716"

# 2022-12-01: The latest stable release.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2"

# John's development container
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-50-g9b5789dcf-dirty"

# 2023-01-24: Igor's development container based on the tag DM-37688 that
#             adds 6 more histograms per scheduler (there are 4 schedulers
#             at each worker).
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-52-g7f9587796"

# 2023-02-02: Igor's development container based on the tag DM-37835 that
#             allows "dry run" for the czar's infile merger if the following
#             SQL variable is specified at the user session:
#
#               SET SESSION QSERV_DEBUG_CZAR_NO_MERGE = 1
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.1.1-rc2-dirty"

# 2023-02-02: Igor's development container based on the tag DM-37854 that
#             implements extended (worker) task states.

# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.1.1-rc2-8-g0d02644e0"
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.1.1-rc2-9-g8266e7390-dirty"
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.1.1-rc2-9-g84871e60f-dirty"
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.1.1-rc2-9-g514d054f7"
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.1.1-rc2-13-g6211193b6-dirty"

# 2023-02-15: based on the main branch that includes John's DM-37983
#             that extend lifetime of temporary subchunk tables to
#             avoid MySQL deadlocking on DROP/CREATE/SELECT 
#             made against the same materialized sub-chunk table.
#             Plus it inludes DM-37854 for monitoring extended
#             task states.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.2.1-rc1-8-gc28fa47d8"

# 2023-03-28: the "new" Qserv based on tag DM-38427. It pulls results
#             from workers using the HTTP protocol.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.2.1-rc2-25-g4df7ef8df"

# 2023-03-28: the "new" Qserv based on tag DM-38427. It pulls results
#             from workers using the XROOT protocol
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.2.1-rc2-25-g4df7ef8df-dirty"

# 2023-04-06: Based on the EPIC branch DM-38069 of the "new" Qserv.
#             The container was built after merging DM-38427 into EPIC.
#             This implementation allows configuring result delivery
#             protocol at workers. Czar would automatically recognize
#             which protocol was selected and pull data from the specified
#             source.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.2.1-rc2-29-g47900f7bc"
#
#             The latest version of the branch built after mergin in
#             the last child branch DM-38704.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-27-g0ce48eabd"

# 2023-04-07: Change to using shared templates for worker queries.
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.2.1-rc2-13-gab61afdef"

# 2023-04-12: The latest production version installed to test "zombi"
#             worker queries.
#
#QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1"

# 2023-04-26: The "main" branch after merging DM-38625 (make target
#             for running clang-format) which was done
#             before switching to XROOTD version ssi-5.3.x and before
#             merging DM-38730 for MySQL query cancellation fix.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-4-g96ae20428"

# 2023-04-18: Based on the reviewed PR of DM-38257 which introduces
#             delayed query text generation from templates. This is
#             is expected to reduce memory footprint of Qserv worker
#             when processing many N-N queries in the subchunk-per-task
#             scenario.
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-11-g2f5a47df8"

# 2023-04-26: The "main" branch after merging DM-38257 (lower memory
#             utilization at workers by keeping query text in a special
#             manager) and before merging DM-38730
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-12-g640f2f081"

# 2023-04-26: The "main" branch after merging DM-38833 (Update `log` and
#             `sphgeom` sumbodules) and right before merging in DM-38730
#             (for MySQL query cancellation fix at workers).
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-19-g7f3abcc86"


# 2023-04-26: The latest state of the "main" branch after merging in DM-38730
#             for MySQL query cancellation fix at workers.
#             This tag is being tested to see if there was a problem during
#             rebase of DM-38069 against "main"
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-27-g2b2fa83a7"

# 2023-04-25: Based on DM-38069 that was rebased against the "main"
#             branch that has DM-38730 for MySQL query cancellation
#             fix at workers and DM-38257 (lower memory utilization
#             at workers by keeping query text in a special manager).
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-35-g425c1d0c9"


# 2023-05-01: Based on DM-38909 used to look for what is hanging query
#             cancelation.
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-32-gd094e7228-dirty"
#
# QSERV_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-37-g2d2289266"

# 2024-02-13: The development version of John G.. It's based on DM-11526
#             which is based on the latest state of the "main"branch of Qserv
#
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.3.1-rc2-20-g3c149771c"

# 2024-03-12: DM-43262
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.3.1-rc2-38-g849d10934"

# 2024-03-27: DM-43262
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.3.1-rc2-56-ga58f49ce6"

# 2024-04-04: DM-43139   controversial
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.3.2-rc1-3-gf64e22cb6"

# 2024-04-08: DM-43384
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.3.2-rc1-12-g23e0bcd69"

# 2024-04-15: DM-43385
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.3.2-rc1-17-g599000a41"

# 2024-07-23: DM-43386 UberJob prototype.
# QSERV_IMAGE_TAG="qserv/lite-qserv:2024.4.1-rc1-27-g66ac35ef8-dirty"

# 2024-08-28: The latest production version
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.7.1-rc1"

# 2024-10-24: DM-45548 
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.10.1-rc1-50-g7b34bb77b-dirty"

# 2024-10-24 DM-45548 revamped UberJobMsg
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.11.2-rc1-65-g5d8d91e11"

# 2025-02-13 DM-43715
#QSERV_IMAGE_TAG="qserv/lite-qserv:2024.11.2-rc1-66-g0515db58c-dirty"

#2025-04-28 DM-45384
#QSERV_IMAGE_TAG="qserv/lite-qserv:2025.4.1-rc2-138-gce2b7a2e3-dirty"

#2025-05-23 DM-50621
#QSERV_IMAGE_TAG="qserv/lite-qserv:2025.3.1-rc1-38-ge3256a10c-dirty"

#2025-06-23 DM-51299
#QSERV_IMAGE_TAG="qserv/lite-qserv:2025.3.1-rc1-50-gf03c39d10-dirty"

#2025-07-11 DM-51733  FIFO vs shared
QSERV_IMAGE_TAG="qserv/lite-qserv:2025.3.1-rc1-57-gb28866caa-dirty"

#2025-08-15 DM-43715 Rebase with main
QSERV_IMAGE_TAG="qserv/lite-qserv:2025.8.2-rc1-34-g32c92e392-dirty"

QSERV_BASE_DIR="/zfspool/qserv-dev"
QSERV_CZAR_DB_PORT=3307
QSERV_CZAR_PROXY_PORT=14047
QSERV_CZAR_SSL_PROXY_PORT=4047
QSERV_CZAR_HTTP_PORT=4078
QSERV_WORKER_DB_PORT=3367
QSERV_XROOTD_PORT=1794
QSERV_CZAR_HTTP_THREADS=16
QSERV_CZAR_HTTP_INGEST_THREADS=16
QSERV_CZAR_HTTP_CONFIG="/config-etc/qserv-czar-http.cfg"
QSERV_CZAR_HTTP_SSL_CERT="/config-etc/ssl/czar-cert.pem"
QSERV_CZAR_HTTP_SSL_KEY="/config-etc/ssl/czar-key.pem"
QSERV_CZAR_HTTP_TMP_DIR="/qserv/data/ingest"
QSERV_CZAR_HTTP_PARAMS="--config=${QSERV_CZAR_HTTP_CONFIG} --port=${QSERV_CZAR_HTTP_PORT} --threads=${QSERV_CZAR_HTTP_THREADS} --worker-ingest-threads=${QSERV_CZAR_HTTP_INGEST_THREADS} --ssl-cert-file=${QSERV_CZAR_HTTP_SSL_CERT} --ssl-private-key-file=${QSERV_CZAR_HTTP_SSL_KEY} --tmp-dir=${QSERV_CZAR_HTTP_TMP_DIR} --verbose"

# -------------------------------------
# ----- Replication/Ingest system -----
# -------------------------------------

# 10.4.21
#REPL_DB_IMAGE_TAG="qserv/lite-mariadb:2021.10.1-lite-rc2"

# 10.6.5
REPL_DB_IMAGE_TAG="qserv/lite-mariadb:2022.1.1-rc1"


# DM-28626: reopening catalogs to add more tables, excluding published
#           tables from the operations.
#           ATTENTION: Replication database schema changes to version 10 
#           in DM-34979.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.5.2-rc1-29-g1c42476c7"

# 2022-09-09: Built of the main branch
#             ATTENTION: updated replication database version to 11 to support
#                        RefMatch tables. There have been a bunch of other
#                        improvements as well.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.7.1-rc1-32-gcbe5a5e48"

# 2022-09-13: Based on the bug fix branch DM-36223.
#             NOTE: updated QMeta schema version to 8 for extended
#                   byte/row counters and a bug fix in the table
#                   schema of QInfo. The R-I system's REST API was
#                   also nodified to follow changes in the schema.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.7.1-rc1-39-g572903551"

# 2022-09-19: Based on DM-36287 that adds support for configuring
#             HTTP proxies for catalog ingests.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-8-gb9e011f02"

# 2022-09-19: Based on DM-36322 that allows ingest workers to pass
#             the FQDN of their hosts to the worker Registry instead
#             of the short host names.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-10-g940badb9c"

# 2022-09-23: Based on DM-30719 that adds the REST service for
#             changing the reoplicatin level and puts the upper
#             limit on the level based on the general configuration
#             parameter and the number of available workers.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-16-g74591498c"

# Temporary image w/ ad-hoc character set settings to 'latin1' in order
# to unblock loaiding ObsCore that has the binary columns. This will be
# permanently fixed in DM-36398.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-22-g65d5d162b-dirty"

# 2022-10-04: Based on DM-34899 that captures warnings after LOAD DATA
#             INFILE ..., stores the warningsin the Replication database,
#             abnd displays those on the Web Dashbnoard.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-37-g838f19a8d"

# 2022-10-24: Based on DM-36627 that implements resource-awared scheduler
#             for processing ingest requests at workers.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-53-gd3c91b47f"

# 2022-10-28: Based on DM-36398 that allows specifying a desired character
#             set for contributions.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-59-g213ed6189"

# 2022-11-04: Based on DM-36722 that allows automated retries of
#             the failed (to pull the input data) ingest requests.
#             Note the schema version number change to 13 for
#             the Replication database.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-68-g89649e638"

# 2022-11-11: Based on DM-36842 that comes with the improved REST API
#             for reporting status info on the table indexes at workers.
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.9.1-rc1-74-g1164f2a9d"

# 2022-11-24: Based on DM-36241 mant to optimize the director index
#             building algorithm.
#
# Improvement 1:
#   Allowed many BOOST ASIO threads at workers to serve
#   Controller's requests
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-6-g3b3652edb"
#
# Improvement 3:
#   Parallel loading of the index contributions into the "director"
#   index table by many threads at the Controller. The threads
#   belong to the Controller's BOOST ASIO pool. Note that
#   the curren implementation if the callback invocaton in
#   the Messanger is still blocking. It means, only one request
#   per worker would be executed. At the next step, the unblocking
#   implementation of the callbacks will be tried.
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-11-ge57a4fd46"
#
# Improvement 3:
#   CSV files are now recorded into the temporary staging area by
#   the index data harveasting requests rather than by the jobs
#   After that the jobs would learn locations of the files from
#   the response objects of the requests and initiate uploding
#   the data into the destination ("director" index) table.
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-12-g7659af032"
#
# Improvement 4:
#   Extended protocol for pulling the "director" index data from
#   workers. The new protocol allows the "windowing" capability.
#   Note that no actual implementation has been made yet. This will
#   be don ein the next commit. Also, fixed a bug in the worker
#   service that wasn't not deleting the temporary files.
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-13-gddc50b571"
#
# Improvement 5:
#   Implemented the "windowing" capability.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-14-g5a9bbe3f7-dirty"
#
# Improvement 5:
#   MySQL table engine for creating the "director" index tables.
#   The default engine is "MyISAM". This has poor performance.
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-17-g99ffaac8c"
#
# Improvement 6:
#   MySQL table engine for creating the "director" index tables.
#   The default engine is "InnoDB".
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-17-gb5348613c"
#
# Improvement 7:
#   Forced garbage collection of the worker requests is now
#   initiated by the index builder job after receiving index
#   data in the completed requests.
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-18-g625cfc600"
#
# Improvement 8:
#   Reduced the numnber of concurrent requests processed by each worker
#   not to exceed the number of processing threads. Also, removing forgotten
#   empty files at workers
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-19-gffa28d078"
#
# Improvement 8:
#   Instance counters for ProtocolBuffer and WorkerRequest to track
#   possible memory leaks. The class ProtocolBuffer would also report
#   the memory allocations/deallocations. All reports are done at
#   the TRACE logging levels.
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-19-gffa28d078-dirty"
#
# Improvement 9:
#   Fixed worker request disposal algorithm at a level of the improved
#   controller requests rather than jobs.
#
#   REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-21-g1bdd55a4d"
#
# Improvement 10:
#   Loading into MySQL is happening within the dedicated threads
#   started by the index builder job rather than using the shared
#   pool of the BOOST ASIO used for processing requests & jobs.
#   Otherwise, all other communications between the Controller
#   and the workers may get blocked while the jobs is attempting
#   to push large amounts of data into MySQL.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-22-g24662726f"

# 2023-01-18: Based on the tag DM-37543. Improvements to the worker
#             monitoring REST service.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-25-g268225920"

# 2023-01-23: The main branch based on the previous two efforts
#             DM-36241 and DM-37543.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-46-gfea6c8162"

# 2023-01-24: Based on the tag DM-37688 that adds 6 more histograms
#             per scheduler (there are 4 schedulers at each worker).
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2022.12.1-rc2-47-g982eac7c4"

# 2023-03-31: Based on the "new" Qserv DM-38427 in which HTTP/1.1 was
#             re-enabled in qhttp (it was disabled in DM-27396). This
#             image has been deployed here to test the effect of
#             the change in the HTTP protocol and decide if this fix
#             should be allowed to be merged into the main branch
#             of Qserv.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.2.1-rc2-26-gb9d3dbd2c"

# 2023-04-06: Based on the EPIC branch DM-38069 of the "new" Qserv.
#             The container was built after merging DM-38427 into EPIC.
#             This implementation allows configuring result delivery
#             protocol at workers. Czar would automatically recognize
#             which protocol was selected and pull data from the specified
#             source.
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.2.1-rc2-29-g47900f7bc"

# 2023-04-17: Based of the DM-38730 branch to fix query cencelation 
#             problems on the workers.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-4-g55e0b4b87-dirty"
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-15-g5a5f16c0c-dirty"
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-18-g35d880446"

# 2023-04-18: Based on the reviewed PR of DM-38257 which introduces
#             delayed query text generation from templates. This is
#             is expected to reduce memory footprint of Qserv worker
#             when processing many N-N queries in the subchunk-per-task
#             scenario.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-11-g2f5a47df8"

# 2023-04-20: The latest production version
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1"

# 2023-04-25: Based on DM-38069 that was rebased against the "main"
#             branch that has DM-38730 for MySQL query cancellation
#             fix at workers and DM-38257 for improved (lower memory utilization
#             query text generation at workers.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-34-g8c24717c0"

# 2023-05-01: Based on DM-38069 that was rebased against DM-38909 (an attempt
#             to fix the query cancellaton problem that exists in "main").
#             Note that DM-38909 is based on "main".
#
# 2023-05-01: Also instrumented mysql::MySQLConnection::cancel() to report
#             progress of the operation to ensure the method get's called
#             and it actually does someting.
#
# 2023-05-05: Also instrumented c-tor and d-tor of the class GetStatusQservMgtRequest
#             to monitor memory allocations. This was done to suspect the memory leak
#             reported in DM-39080.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-43-g38a6d21ec"

# 2023-05-11: Based on DM-39080 to investigate a possible memory
#             leak within the Replication Framework when sending
#             status probes to Qserv workers.
#
# REPL_IMAGE_TAG="qserv/lite-qserv:2023.4.1-rc1-39-g60299e029"
#

# 2024-02-13: Set to be the same tag as for Qserv.
#             Do not change it unless needed.
#
REPL_IMAGE_TAG="${QSERV_IMAGE_TAG}"

REPL_INSTANCE_ID="slac6dev"
REPL_DB_PORT=23307
REPL_CONTR_HTTP_PORT=25781
REPL_REG_PORT=25782

REPL_REG_PARAMETERS="--registry-port=${REPL_REG_PORT} --debug"

# Extended Controller timeouts to allow long operation when ingesting
# large catalogs:
#   request timeout: 8 hours
#   job timeout: 24 hours
# --controller-num-director-index-connections=4
# Temporarily disabled to avoid overloading the new qserv dispatcher:
# --qserv-chunk-map-update
# Temporarily disabled to avoid removing extra replicas:
# --purge
REPL_CONTR_PARAMETERS="--registry-port=${REPL_REG_PORT} --xrootd-port=${QSERV_XROOTD_PORT} --controller-http-server-port=${REPL_CONTR_HTTP_PORT} --http-root=/usr/local/qserv/www/ --worker-evict-timeout=3600 --health-probe-interval=120 --replication-interval=600 --qserv-sync-timeout=600 --do-not-create-folders --controller-ingest-job-monitor-ival-sec=1 --controller-request-timeout-sec=28800 --controller-job-timeout-sec=86400 --purge --debug"

REPL_WORKER_SVC_PORT=25700
REPL_WORKER_FS_PORT=25701
REPL_WORKER_LOADER_PORT=25702
REPL_WORKER_EXPORTER_PORT=25703
REPL_WORKER_HTTP_LOADER_PORT=25704

REPL_WORKER_PARAMETERS="--registry-port=${REPL_REG_PORT} --worker-svc-port=${REPL_WORKER_SVC_PORT} --worker-fs-port=${REPL_WORKER_FS_PORT} --worker-loader-port=${REPL_WORKER_LOADER_PORT} --worker-exporter-port=${REPL_WORKER_EXPORTER_PORT} --worker-http-loader-port=${REPL_WORKER_HTTP_LOADER_PORT} --worker-ingest-num-retries=4 --schema-upgrade-wait=1 --schema-upgrade-wait-timeout=600 --do-not-create-folders --debug"

# Uncomment if needed to mount the local (ouside the container) version of
# the Web dashboard and other Web apps served by the HTTP server of
# the Master Controller 
# REPL_HTTP_ROOT="/zfspool/management/qserv/src/www"

# Limit size of the replication containers by 100 GB
# This is needed for ingesting (very) large numbers of contributions.
REPL_MEMORY_LIMIT=107374182400

# ----- Common parameters

# User account under which the containers will be run.
#
# % id rubinqsv
#   uid=45386(rubinqsv) gid=1126(gu) groups=1126(gu)
#
CONTAINER_UID=45386
CONTAINER_GID=1126


CONTAINER_NAME_PREFIX="qserv-dev-"
#CONTAINER_RESTART_POLICY="unless-stopped"
CONTAINER_RESTART_POLICY=""

# 10 GB
ULIMIT_MEMLOCK=1099511627776

# Unlimited core file size
ULIMIT_CORE="-1:-1"

# Other parameters are set by the following script based on the above defined
# one, or be loaded from predefined locations.
. $(dirname "$0")/common

